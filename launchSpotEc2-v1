#!/bin/bash
# launch.sh                                                                                                            # 2019-10-05 this launches single spot instance created for testing databases
set -e
REGION="eu-west-1"
INSTANCE_TYPE="t3.small" # value to be changed in spec.json file
echo $(($(cat COUNTER.file)+1)) > COUNTER.file
COUNTER=$(cat COUNTER.file)
echo "${COUNTER}" > COUNTER.file
NAMETAGVALUE="${COUNTER}-RafDB-spot-test"

echo -e "   \e[95m*** \e[96mLaunching spot instance \e[95m***"

# asking for price
PRICE=$(aws --region=${REGION} ec2 describe-spot-price-history --instance-types ${INSTANCE_TYPE} --start-time=$(date +%s) --product-descriptions="Linux/UNIX" --query 'SpotPriceHistory[*].{az:AvailabilityZone, price:SpotPrice}' --output text | grep ${REGION}a | cut -f2)

# just info output
echo -e "   \e[95mInstance spot price in \e[97m${REGION} \e[95mfor \e[97m${INSTANCE_TYPE} \e[95mis: \e[97m${PRICE}"
sleep 1

# spot instance request
aws ec2 request-spot-instances --spot-price "${PRICE}" --instance-count 1 --type "one-time" --launch-specification file://spec.json --output table

sleep 3
# tag instance
echo -e "   \e[95mTagging spot instance"
TAGTHIS=$(aws ec2 describe-spot-instance-requests --output text | awk '/SPOTINSTANCEREQUESTS/ && /active/' | cut -f2,3 | sort | cut -f2 | tail -n 1)
aws ec2 create-tags --resources ${TAGTHIS} --tags Key=Name,Value=${NAMETAGVALUE} Key=Ping,Value=Pong
echo -e "   Instance: \e[97m${TAGTHIS} \e[95mtagged as \e[34mName: \e[97m${NAMETAGVALUE}"
echo ""
echo -e "                           \e[95m*** \e[38;5;82mFINISHED \e[95m***"
for i in {16..50} {50..16} ; do echo -en "\e[38;5;${i}m#\e[0m" ; done ; echo
echo -e "\e[0m"

=====================================================================================================================
spec.json

{
  "ImageId": "ami-0ce71448843cb18a1",
  "KeyName": "testKey",
  "SecurityGroupIds": [ "sg-0e5441aafb6d3deaf" ],
  "InstanceType": "t3.small",
  "SubnetId": "subnet-f853c09f",
  "IamInstanceProfile": {
      "Arn": "arn:aws:iam::XXXXXXXXXXXX:instance-profile/S3-Admin-Access"
  },
  "UserData": "IyEvYmluL2Jhc2gKeXVtIHVwZGF0ZSAteQplY2hvICJzZXQgYmFja2dyb3VuZD1kYXJrIiA+IC9ob21lL2VjMi11c2VyLy52aW1yYwplY2hvICJzZXQgdGFic3RvcD00IiA+PiAvaG9tZS9lYzItdXNlci8udmltcmMKZWNobyAic2V0IHNoaWZ0d2lkdGg9NCIgPj4gL2hvbWUvZWMyLXVzZXIvLnZpbXJjCmVjaG8gInNldCBleHBhbmR0YWIiID4+IC9ob21lL2VjMi11c2VyLy52aW1yYwplY2hvICJhbGlhcyB2aT0ndmltJyIgPj4gL2hvbWUvZWMyLXVzZXIvLmJhc2hyYwplY2hvICJzZXQgYmFja2dyb3VuZD1kYXJrIiA+PiAvcm9vdC8udmltcmMKZWNobyAiYWxpYXMgdmk9J3ZpbSciID4+IC9yb290Ly5iYXNocmM=",
  "BlockDeviceMappings": [
    {
      "DeviceName": "/dev/xvda",
      "VirtualName": "HereIsVirtualName",
      "Ebs": {
        "DeleteOnTermination": true,
        "VolumeSize": 8,
        "VolumeType": "gp2",
        "Encrypted": false
      },
  "NoDevice": ""
    }
  ]
}
#=====================================================================================================================
COUNTER.file
10

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++notes++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#EXAMPLE DATABASES:
https://dev.mysql.com/doc/index-other.html

#EMPLOYEES DB:
https://dev.mysql.com/doc/employee/en/employees-installation.html
sudo yum install git
sudo git clone https://github.com/datacharmer/test_db
cd /home/ec2-user/test_db	-> 243M    test_db/  (albo zip  168M    /test_db-master)
mysql -u root -t < employees.sql

#SAKILA DB: 
https://dev.mysql.com/doc/sakila/en/sakila-installation.html

PERCONA INSTALLATION:
https://www.percona.com/doc/percona-xtrabackup/2.4/installation/yum_repo.html  (Percona XtraBackup 2.4 Documentation)
yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm -y
yum install percona-xtrabackup-24 -y

MY SQL - mariadb
Installing client lets you only log in to DB remotely

# INSTALL
sudo yum install mariadb-server â€“y
echo "[client] 
user=root 
password=*****" > /root/.my.cnf
mysql_secure_installation
#>>> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.100.%' IDENTIFIED BY 'my-new-password' WITH GRANT OPTION;

# INFO
less /var/log/mariadb/mariadb.log	-> main log file , people cannot log in and other issues
/lib/systemd/system/mariadb.service	-> main unit file
vi /etc/my.cnf				->  main mysql config file
ss -tulpn | grep mysql     netstat -tulpn | grep mysql   	-> to port number if its running 

# DB BACKUPS - tutorialinux
Wszystko on running db
mysqldump --all-databases --all-routines > /path/to/fulldump.sql
mysql â€“uroot â€“p < alldatabases.sql
-	- - - - - - - - - -
mysqldump --databases employees > /backups/$(date +%Y-%m-%d).sql.bkp
vi /etc/crontab -> 2 2 * * * * * root mysqldump --databases employees > /backups/$(date +%Y-%m-%d).sql.bkp

jest ok jak db istnieje, nie da sie zrobic restore gdy recznie usune folder employees

# DB BACKUPS - Yogesh Mehta
https://www.youtube.com/watch?v=6aOUOHJ04tE
mysqldump -u root --databases employees > /backups/$(date +%Y-%m-%d)-ABC.sql.bkp
file /backups/2019-10-05-ABC.sql.bkp
/backups/2019-10-05-ABC.sql.bkp: ASCII text, with very long lines   -> NOT ENCRYPTED!
>>>ENCRYPT BACKED UP FILE
openssl enc -aes-256-cbc -in /backups/2019-10-05-ABC.sql.bkp -out /backups/2019-10-05-ENCRYP.sql.bkp
rm /backups/2019-10-05-ABC.sql.bkp

now drop database employees

enc -aes-256-cbc -d -in /backups/2019-10-05-ENCRYP.sql.bkp > /backups/2019-10-05-DECRYP.sql.bkp
mysql -u root < /backups/2019-10-05-DECRYP.sql.bkp

# TROUBLESHOOTING - Yogesh Mehta
grep -i error /var/log/mariadb/mariadb.log	-> good for debugging
grep -i warning /var/log/mariadb/mariadb.log
grep -i port /var/log/mariadb/mariadb.log	-> to check port on which db is running (show variables like "port")

nmap â€“p 3306 90.10.10.20 -> to check from different host


___________________________________________________
After checking the logs I found the following error:
[ERROR] Unknown/unsupported storage engine: InnoDB
I removed these files:
rm /var/lib/mysql/ib_logfile0
rm /var/lib/mysql/ib_logfile1 
at /var/lib/mysql
This resolved my problem after restart.
__________________________________________________



#======USER DATA================
#!/bin/bash
yum update -y
echo "set background=dark" > /home/ec2-user/.vimrc
echo "set tabstop=4" >> /home/ec2-user/.vimrc
echo "set shiftwidth=4" >> /home/ec2-user/.vimrc
echo "set expandtab" >> /home/ec2-user/.vimrc
echo "alias vi='vim'" >> /home/ec2-user/.bashrc
echo "set background=dark" >> /root/.vimrc
echo "alias vi='vim'" >> /root/.bashrc

yum install mariadb-server -y
echo "[client] 
user=root 
password=*****
auto-rehash" > /root/.my.cnf
yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm -y
yum install percona-xtrabackup-24 -y

yum install git -y
git clone https://github.com/datacharmer/test_db /home/ec2-user/test_db

systemctl start mariadb.service

=+=+=+==+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
MOUNTING

https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html#identify-nvme-ebs-device
lsblk â€“f
mkfs -t xfs /dev/nvme1n1		(makefilesystem â€“ no need to create partition)
mount /dev/nvme1n1 /sql/bin_log  	mount manually
	mount automatically
/sbin/ebsnvme-id /dev/nvme1n1	find out device name
Volume ID: vol-05f01e64249378461
/dev/sdf
 ðŸŽ„blkid
[root@ip-172-31-5-23 /]# blkid
/dev/nvme0n1: PTUUID="33e98a7e-ccdf-4af7-8a35-da18e704cdd4" PTTYPE="gpt"
/dev/nvme0n1p1: LABEL="/" UUID="add39d87-732e-4e76-9ad7-40a00dbb04e5" TYPE="xfs" PARTLABEL="Linux" PARTUUID="47de1259-f7c2-470b-b49b-5e054f378a95"
/dev/nvme0n1p128: PARTLABEL="BIOS Boot Partition" PARTUUID="430fb5f4-e6d9-4c53-b89f-117c8989b982"
/dev/nvme1n1: UUID="d3494eb3-c309-4dbd-b904-a997d013e9b5" TYPE="xfs"

============================================
POINT IN TIME RECOVERY -> BINARY LOGS
https://dev.mysql.com/doc/mysql-backup-excerpt/5.5/en/point-in-time-recovery.html
SHOW BINARY LOGS;
https://www.youtube.com/watch?v=TkSwC923-Xs (TechBrothersIT)

vi /etc/my.cnf
[mysqld]
log-bin=anyName.log				(anyNameXX.log â€“ bedzie dodane automatically)
log-bin-index=anyIndexName.log
max-binlog-size=10M

mysqlbinlog anyName.000001


